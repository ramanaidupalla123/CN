#include <stdio.h>
#define MAX 100
#define INF 9999   // Infinity (no connection)

void dijkstra(int n, int cost[MAX][MAX], int src) {
    int dist[MAX], visit[MAX];
    int i, j, count, min, next;

    // Step 1: Initialize distances and visited array
    for (i = 0; i < n; i++) {
        dist[i] = cost[src][i];
        visit[i] = 0;
    }

    dist[src] = 0;
    visit[src] = 1;
    count = 1;

    // Step 2: Find shortest path for all vertices
    while (count < n - 1) {
        min = INF;
        next = -1;

        // Find the unvisited node with the smallest distance
        for (i = 0; i < n; i++) {
            if (!visit[i] && dist[i] < min) {
                min = dist[i];
                next = i;
            }
        }

        if (next == -1) break; // No more reachable nodes

        visit[next] = 1;

        // Update distances of neighbors
        for (i = 0; i < n; i++) {
            if (!visit[i] && cost[next][i] != INF &&
                dist[next] + cost[next][i] < dist[i]) {
                dist[i] = dist[next] + cost[next][i];
            }
        }

        count++;
    }

    // Step 3: Print shortest distances
    printf("\nShortest distance from source %d:\n", src);
    for (i = 0; i < n; i++) {
        printf("To %d : %d\n", i, dist[i]);
    }
}

int main() {
    int n, cost[MAX][MAX], i, j, src;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter adjacency matrix (use %d for no edge):\n", INF);
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &cost[i][j]);

    printf("Enter source vertex (0 to %d): ", n - 1);
    scanf("%d", &src);

    dijkstra(n, cost, src);
    return 0;
}

output : 

Enter number of vertices: 4
Enter adjacency matrix (use 9999 for no edge):
0 3 9999 7
8 0 2 9999
5 9999 0 1
2 9999 9999 0
Enter source vertex (0 to 3): 0

Shortest distance from source 0:
To 0 : 0
To 1 : 3
To 2 : 5
To 3 : 6
