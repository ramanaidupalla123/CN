#include <stdio.h>
#define MAX 10
#define INF 9999

int main() {
    int n, i, j, k, c;
    int d[MAX][MAX], via[MAX][MAX];

    printf("Enter number of nodes: ");
    scanf("%d", &n);

    printf("Enter cost/delay matrix (%d for no link):\n", INF);
    for(i = 0; i < n; i++) {
        for(j = 0; j < n; j++) {
            scanf("%d", &d[i][j]);
            if(i != j && d[i][j] == 0)
                d[i][j] = INF;
            via[i][j] = j;   // next hop initially direct
        }
    }

    // Distance Vector Algorithm
    do {
        c = 0;
        for(i = 0; i < n; i++) {
            for(j = 0; j < n; j++) {
                for(k = 0; k < n; k++) {
                    if(d[i][j] > d[i][k] + d[k][j]) {
                        d[i][j] = d[i][k] + d[k][j];
                        via[i][j] = k;
                        c++;
                    }
                }
            }
        }
    } while(c != 0);

    // Display routing tables
    for(i = 0; i < n; i++) {
        printf("\nRouting table for node %d:\n", i);
        printf("Dest\tNextHop\tCost\n");
        for(j = 0; j < n; j++) {
            if(i == j)
                printf("%d\t-\t0\n", j);
            else
                printf("%d\t%d\t%d\n", j, via[i][j], d[i][j]);
        }
    }
    return 0;
}

output : 

Enter number of nodes: 4
Enter cost/delay matrix (9999 for no link):
0 3 9999 7
3 0 2 9999
9999 2 0 1
7 9999 1 0

Routing table for node 0:
Dest    NextHop Cost
0       -       0
1       1       3
2       1       5
3       2       6

Routing table for node 1:
Dest    NextHop Cost
0       0       3
1       -       0
2       2       2
3       2       3

Routing table for node 2:
Dest    NextHop Cost
0       1       5
1       1       2
2       -       0
3       3       1

Routing table for node 3:
Dest    NextHop Cost
0       2       6
1       2       3
2       2       1
3       -       0
